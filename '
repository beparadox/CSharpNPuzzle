namespace NPuzzleTests 
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using NUnit.Framework;

	[TestFixture]
	public class SearchTests 
	{
		[Test]
			/*!
			 * Test using a delegate
			 */
                public void TestDelegate()
		{
			Heuristics.HeuristicFunction<int[],int,int> handler = Heuristics.NPuzzleHeuristics.ManhattanDistance;

		}

		[Test]
                public void TestSearchClassCreation()
		{
			int size = 9;
			Problem.NPuzzleProblem problem = NPuzzleUtils.CreateProblem(size);
			Heuristics.HeuristicFunction<int[],int,int> handler = Heuristics.NPuzzleHeuristics.ManhattanDistance;
			Search.BestFirstGraphSearch<int[], int, int> bfgs = new Search.BestFirstGraphSearch<int[], int, int>(problem, handler);
		}

		[Test]
                public void TestFrontierAdd()
		{
			 SortedList<int, SearchTreeNode.Node<int[],int,int> > frontier = new SortedList<int, SearchTreeNode.Node<int[],int,int> >();
			//SortedList<int, List<SearchTreeNode.Node<int[],int,int> > frontier = new SortedList<int, List<SearchTreeNode.Node<int[],int,int> >();


			Heuristics.HeuristicFunction<int[],int,int> handler = Heuristics.NPuzzleHeuristics.ManhattanDistance;

			List<SearchTreeNode.Node<int[],int,int> > nodes = TestNode.CreateNodesForTesting();
			foreach(var node in nodes)
			{
				int md = handler(node);
				//! if it contains the key,
				//! there should already exist a
				//! list at that index
				if (frontier.Contains(md))
				{
					//! get the list at key md

				} else {
					//! create a new list
					//! add the node to it
					//! set it in the sorted list at key md
					List<SearchTreeNode.Node<int[],int,int> > list = new List<SearchTreeNode.Node<int[],int,int> >();
					list.Add(node);
					frontier.Add(md, list);
				}
			}
       
			System.Diagnostics.Debug.WriteLine("State: ");
		}

		private void PrintKeysandValues(SortedList slist)
		{

		}


	}
}
